'|'
'.'
'('
')'
'['
'[^'
']'
'a-b'
'{'
'}'

regex       = expr eof { regex };
expr        = alt alts ;
alts        = '|' alt { alt } alts
            | $empty;
alt         = { empty } factor factors
            | { empty } $empty;
factors     = factor { cat } factors
            | $empty;
char_class  = ranges ']' { char_class }
ranges      = 'a-z' { range } ranges
            | $empty;
factor      = '(' expr ')' { sub } unops
            | '{' id '}' { id } unops
            | '[' char_class unops
            | '[^' char_class { neg_char_class } unops
            | '.' { dotall } unops
            | a { sym } unops;
unops       = '*' { star } unops
            | '+' { plus } unops
            | '?' { optional } unops
            | '{' number '}' { repeat_exact } unops
            | $empty;

character class ideas:
1. Alternatives
    - add a single "range" or "interval" state
    - merge and sort from the class during parsing, i.e.:
        [a-zde0-53-934]
        [a-h d e 0-5 3-9 3 4]
        [a-h 0-9]
        [a-z0-9]
    - if a negated class, invert the above merged and sorted interval list
    - create a machine from the list of intervals as branching machines of range
      and symbol states
    - PROS: simulation logic only needs to consider single range or symbol at a time
    - CONS: potentially many more states, for alphabet a-z,
        [^a] would then create 25 symbol states and 24 branching states

2. Single State
    - list of merged and sorted intervals directly on the state
    - PROS: single state
    - CONS: simulation logic is more complex, requires a loop


ERROR HANDLING

Computing the "next" set of tokens based on parser state:

In a table-driven parser I'd use a stack and parsing a sub-expression would look like this:

"("

')' EXPR '('        NEXT = FIRST('(')                               '(' is not nullable, so I don't need to consider the rest of the stack
')' EXPR            NEXT = FIRST(EXPR) ∪ FIRST(')')                 EXPR is nullable, so I need to consider the next grammar symbol
')' ALTS ALT        NEXT = FIRST(ALT) ∪ FIRST(ALTS) ∪ FIRST(')')    ALT and ALTS are nullable, so I need to consider the next grammar symbols
')' ALTS            NEXT = FIRST(ALTS) ∪ FIRST(')')                 ALTS is nullable, so I need to consider the next grammar symbol
')'                 NEXT = FIRST(')')                               ')' is not nullable, so I don't need to consider the rest of the stack

"(a"

')' EXPR '('              NEXT = FIRST('(')                               '(' is not nullable, so I don't need to consider the rest of the stack
')' EXPR                  NEXT = FIRST(EXPR) ∪ FIRST(')')                 EXPR is nullable, so I need to consider the next grammar symbol
')' ALTS ALT              NEXT = FIRST(ALT) ∪ FIRST(ALTS) ∪ FIRST(')')    ALT and ALTS are nullable, so I need to consider the next grammar symbols
')' ALTS FACTORS FACTOR   NEXT = FIRST(FACTOR) ∪ FIRST(FACTORS) ∪ FIRST(ALTS) ∪ FIRST(')')    " "
    = { '(' '{a' '[' '[^' '.' 'a' '|' ')' }

The KEY THING is computing FIRST(current state of the parser stack)



