Instruction-Level Parallelism

pipelining
- a CPU can issue several operations in a single clock-cycle
- or it can issue just one, and pipeline the operations
- practically every processor uses an instruction pipeline
- a new instruction can be fetched every clock while preceding instructions are still going through the pipeline

pipelining cont
- if the result from an instruction is available by the time the succeeding instruction needs the data, the processor can issue an instruction each tick
- branch instructions are problematic because, until they are fetched, decoded, and executed, the processor does not know which instruction will execute next
- for a 5-stage instruction pipeline instructions i, i + 1, i + 2, i + 3, and i + 4 are executed in parallel (sort of)
- many processors speculatively fetch and decode the immediately succeeding instructions in case a branch is not taken
- when a branch is taken, the instruction pipeline is emptied and the branch target is fetched
- example 5 stages: IF (fetch), ID (decode), EX (execute), MEM (memory access), WB (write back result)

execution
- some instructions take several ticks to execute, like memory-load
- an instruction is _pipelined_ if succeeding instructions not dependent on the result are allowed to proceed
- if the deepest executin pipeline has n stages, then n operations can be "in flight" at the same time
- not all instructions are fully pipelined
- for example, floating point adds and multiplies usually are fully pipelined, while divides are not
- general purpose processors dynamically detect dependencies between consecutive instructions, and automatically stall the execution of instructions if their operands are not available
- some processors, like those in embedded devices, leave dependence checking to software to keep power consumption low
- machines that rely on software to manage instruction parallelism are known as VLIW (very long instruction word) machines, and those that manage it in hardware are known as _superscalar_ machines.
- compilers manage parallelism in VLIW machines by inserting special instructions
- superscalar machines have a regular instruction set with sequential execution semantics, but automatically detect dependencies and parallelize

Code Scheduling Constraints

code generated by a code generator can be _scheduled_ which is a form of optimization and is subject to three constraints:
1. control-dependence constraints, i.e. all of the operations executed in the original program must be executed in the original one
2. data-dependence constraints, i.e. the operations in the optimized program must produce the same results as the corresponding ones in the original program
3. resource constriants, i.e. the schedule must not oversubscribe resources on the machine

operations that write to the variables that another operation depends on are said to share a _data dependence_ and cannot be commuted
three flavors:
1. _true dependence_ read after write, if a write is followed by a read of the same location, the read depends on the value written
    o1: z = x + y
    o2: r = !z          <-  o2 depends on the result of o1
2. _antidependence_ write after read, if the write happens before the read, then the read operation will pick up the wrong value
    o1: z = x + y
    o2: x = #1          <- if this occurs before o1, then we'll overwrite the value of x that z should be dependent on
3. output dependence, write after write, two writes to the same location share an output dependence
    o1: z = x + y
    o2: z = #10         <- should these instructions result in z being x + y or 10?

#2 and #3 are referred to as _storage-related dependencies_.
- they can be eliminated by choosing different locations for the writes

Languages that support pointers make it challenging to prove that there are no data dependencies between instructions

data-dependence analysis:
- determining whether or not operations refer to disjoint memory locations

pointer-alias analysis:
- two points are _aliased_ if they can refer to the same object
- analyzing this is difficult because there are potentially many aliased pointers in a program

interprocedural analysis:
- determine, for example, if the same variable is passed as two or more different arguments

The goal of minimizing the number of registers used conflicts directly with the goal of maximizing instruction-level parallelism

hardware register renaming is a stopgap computer architests put in place to undo the effects of register optimization in compilers
- it eliminates false data dependencies that arise from teh reuse of registers by successive instructions that do not have any real data dependencies between them
- example:
    LD t1 a
    ST b t1
    LD t2 c
    ST d t2
- if the temporary registers t1 and t2 are allocated to distinct registers, than this code can be parallelized, otherwise it must execute serially
- traditional register-allocation techniques seek to minimize the number of registers used to perform any one computation
- see example 10.3 for how this in effect serializes a computation, and prevents it from being executed in parallel

Scheduling within a basic block is easy, because all of the instructions within the basic block are guaranteed to execute once we've entered the block
- they can also be reordered arbitrarily as long as the data dependencies are satisfied
- but basic blocks are typically very small, and their instructions are highly dependent
- So it's critical to think bigger
- If we know that an instruction is _likely_ to be executed, and we've got an idle resource available, we can execute the instruction _speculatively_
- The program then runs faster if the speculation turns out to be correct

An instruction j is said to be _control-dependent_ on instruction i if the outcome of i determines whether or not j is executed
E.g.
    while (c) s;    <-- s is control-dependent on c

Because memory loads are costly, it would seem that they'd be fertile ground for speculative execution, but it's possible for speculatively executing a load may raise an illegal address exception, or a page fault, or cache miss
    and so this is generally not done.

Special features to speculatively access memory:
prefetching
    prefetch instruction brings memory to the cache before it is used, if the access would be invalid or cause a page fault, the processor can simply ignore it
poison bits

Predicated Execution
- Branches are expensive, and mispredicted branches are even moreso.
- predicated instructions, can reduce the number of branches in a program
- like a normal instruction, but with an extra predicate operand
- CMOVZ R2 R3 R1 "move R3 to R2 only if R1 is zero"

For example:
    if (a == 0)
        b = c + d;
To:
    LET a = R1, b = R2, c = R4, d = R5 in
    ADD R3 R4 R5
    CMOVZ R2 R3 R1

- without the JMP statements this can become part of a larger basic block, and the processor doesn't have a chance to mispredict

Static vs Dynamically Schedule machines:
- statically schedule machines explicitly define what can execute in parallel in the instruction set
- dynamically scheduled machines analyze data dependencies and schedule on-the-fly, and this is not reflected in the instruction set

Basic Machine Model:
M = (R, T)
1. A set of operation types, T, such as loads, stores, arithmetic, etc
2. A vector R = [r1, r2, ..., rn] representing hardware resources, where ri is the number of units available of the ith kind of resource
   Resource types include: memory access units, ALUs, FPUs, etc
- each operation has a set of input operands, a set of output operands, and a resource requirement
- each input operand has an associated input latency, which is a requirement on when the input must be available
- and each output opernad has an output latency, which indicates when the result will be available

resource usage for each machine operation type t is modeled by a two dimensional _resource-reservation table_, _RT_.
- the width of the table is the number of kinds of resources in the machine, and it's length is the duration over which resources are used by the operation
- Entry RT(t)[i, j] is the number of units of the jth resource used by an operation of type t, i ticks after it is issued
