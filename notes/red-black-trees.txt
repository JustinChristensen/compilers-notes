
Red-Black Binary Tree Invariants:
 1. Nodes are either red or black
 2. The root node is black
 3. NULL (leafs) are considered to be black
 4. If a node is red, both it's children are black
 5. All simple (why simple?) paths from a node to it's descendant
     leaves contain the same number of black nodes

If a node is red, then both of it's children are black
If a node is black, then it's children can be either red or black

Can a black node have two red children?
Once inserted, do nodes change colors?

2^(bh(x) - 1) - 1 + 2^(bh(x) - 1) - 1 + 1
2^bh(x) * 2^(-1) - 1 + 2^bh(x) * 2^(-1) - 1 + 1
2^bh(x) * 1/2 - 1 + 2^bh(x) * 1/2 - 1 + 1
2^bh(x) * 1/2 - 1 + 2^bh(x) * 1/2
2^bh(x)/2 - 1 + 2^bh(x)/2
2^bh(x) - 1

n >= 2^(h/2) - 1
n + 1 >= 2^(h/2)
log2(n + 1) >= log2(2^(h/2))
log2(n + 1) >= h/2
2 * log2(n + 1) >= h
h <= 2 * log2(n + 1)

Tree rotation

   Left Rotation
   A's right points to B's left
   B's left points to A


        +-----+                                          +-----+
   +----|  A  |-----+                              +-----|  C  |-----+
   |    +-----+     |                              |     +-----+     |
   |                |            <------>          |                 |
   a             +-----+                        +-----+              d
            +----|  C  |----+              +----|  A  |----+
            |    +-----+    |              |    +-----+    |
            |               |              |               |
            b               d              a               b

If I choose not to store parent pointers in the tree, I'll need to maintain a stack
of parent pointers as I traverse downward during insertion and deletion:
struct bin **parents = calloc(depth(node), sizeof node);

Fixup:

The only case where the fixup routine continues the loop is when the inserted node has a red uncle
on either the left or right side

The result of that iteration is that the grandparent is a red node, where all other cases
through the loop yield a black grandparent

BBB     <-- root node, and two null pointers
BBR
BRB
RBB
RBR

Deletion

let node = found node
    x = lowest transplanted node
while x is not the root and black
    if x is a left child
        w = x's sibling
        if w is red
            w is black
            x's parent is red
            left rotate x's parent
            w = x's new sibling
        if w's children are black
            w's color is red        // the above case ensures w is black
            x = x's parent
        else
            if w's right child is black
                w's left child is black
                w's color is red
                right rotate w
                w = x's new sibling
            w's color is the x's parent's color
            x's parent's color is black
            w's right child is black
            left rotate x's parent
            x = root
    else
        // symmetric

A 2-3-4 tree point of view:

An internal node with 1 key MUST have 2 children (2-node)
An internal node with 2 keys MUST have 3 children (3-node)
An internal node with 3 keys MUST have 4 children (4-node)

When the key to delete is part of a leaf node (B B B, R B R, R B B, B B R):
    If the deleted key is red:
        We're done, the node becomes either a 2 or a 3 node
    If the deleted key is black:
        Replace the deleted key with one of it's adjacent red keys, if they exist
When the key to delete is part of an internal node

Node to delete: x

"x is part of a leaf group"
if x is red and children are nil or
if x is black and has 1 or 2 red children without grandchildren

Removal strategy - i.e. how many nodes do we need to make a removal decision and corrective decision

Generally speaking, we can't remove 2-node groups from the tree or the tree will become unbalanced
    - the property "all simple paths from the root must contain the same number of black nodes" enforces this

So, do we then seek to merge on the way down to the node to be deleted?

Case #1:
    Preconditions (deleted node x):
        red
        has no children (part of a leaf group)
    Fix:
        1. None

Case #2:
    Preconditions (deleted node x):
        black
        has children
        has no grandchildren (part of a leaf group)
    Fix:
        1. Replace x with either child, y
        2. Paint y black
        3. Done

Case #3:
    Preconditions (deleted node x):
        black
        no children
        has an immediate 3-node sibling (sibling is black with a red child)
    Fix:
        1. Move the parent, p, down into x's group prior to deleting x
        2. Move either the successor or predecessor, s, of the parent up into p's previous group
        3. The previous group of s now contains a 2-node with node n
        4. Paint p black
        5. Paint s red
        6. Paint n black
        7. Done

Case #4:
    Preconditions (deleted node x):
        black
        no children
        has a 3-node cousin (uncle node has a 3 node child)
    Fix:
        1. Left or right rotate x's uncle, u, to bring the other cousin, o, into the uncle's place
        2. Left or right rotate the grandparent, g, to make o the new grandparent
        3. Left or right rotate u down into the other cousin's spot
        4. Paint u black
        5. Paint c's child, n, black
        6. Paint c red
        7. Left rotate g
        8. Done

Case #5:
    Preconditions (deleted node x):
        black
        no children
        has no 3 node sibling or cousins
        parent, p, is part of a 3 or 4 node group
    Fix:
        1. Bring the parent node, p, and sibling s, down into x's group
        2. Paint p black, and s and x red
        3. Delete x
        4. Done

Case #6:
    Preconditions (deleted node x):
        red
        has children
        is part of a 3 or 4-node internal group
        either child is part of a 3-node or 4-node group
    Fix:
        1. Move
        2. Paint p black, and s and x red
        3. Delete x
        4. Done

Case #7: Deleted node x is part of an internal group and is black


