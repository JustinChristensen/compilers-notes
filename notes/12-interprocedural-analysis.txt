Interprocedural Analysis

- for programming languages like C or Java pointer aliasing is key to analyzing interprocedural analysis
- datalog, a notation that greatly hides the complexity of efficient pointer analysis
- BDD, binary decision diagram
- most compiler optimizations performed on the contents of procedures, one at a time
- these optimizations are known as intra-procedural analysis
- inter-procedural analysis operate across the entire program
- inlining replaces the invocation of a procedure with the body of the procedure itself
- this method can only be used if we know the target of the procedure call
- if procedures are invoked indirectly through a pointer, analysis can in some cases determine the unique target of the invocation for inlining

Basic Concepts
- call graphs, which procedure calls which
- context sensitivity requires that data-flow analysis determine the order of procedure calls
- a call graph is a set of nodes and edges such that
    * there are nodes for procedures in the program
    * and nodes for individual call sites
    * if call site c may call procedure p, then there is an edge from c to p
- for static invocations, there is exactly one edge from a call site to a procedure (a call site has one and belongs to a procedure)
- for dynamic invocations, like those through a function pointer or function parameter, there may be potentially many edges from a single call site to the procedures in the graph
- indirect calls are the norm for OOP languages
- virtual method invocations requires the type of the receiver object before we can determine which procedure is being invoked
- the presence of indirect calls through pointers to procedures requires us to do interprocedural analysis to determine the values that the pointers can take on through the life of the program

Context Sensitivity
- the main challenge of inter-procedural analysis is that each procedure is dependent upon it's context.
- context-insensitive analysis treats each call and return as goto operations.
- to do this, we create an alternate control flow graph where
    * call sites have edges to the beginning of the procedure being called (as if a goto)
    * edges leading back from the return statement back to the instruction after the call site
- the string of call sites on the stack is known as the call string
- for situations where we may have an unbounded number of calls, such as recursive invocation, we can use a technique to limit the context
    called k-limiting the call string (just use the k most recent calls)
- another option is to be fully context-sensitive for acyclic call strings, and k-limited for cyclic ones

Cloning-Based Context-Sensitive Analysis
- another option is to clone the procedure for each unique context of interest
- in reality, we attach multiple instances of context information to a single procedure

Summary-Based Context-Sensitive Analysis
- each procedure has a summary attached that describes some observable behavior about the procedure
- compute the transfer function for regions and attach it as a summary to the procedure
- then walk through the call graph and compute the effect of the computation

Why?
- for virtual method invocation in an OOP language we can identify commonly-used receiver types and potentially inline that type's instance of the method.
- we can improve intraprocedural analysis to determine whether or not pointers are aliases of variables
- identify further routines for parallelization
- static analysis to avoid bugs
- detecting buffer overflows

Logical Representation of Data Flow
- rather than expressing "definition D is in set IN[B]" we use notation like in(B, D)
- it generalizes the bit-vector approach to set operations

Datalog
- a language that uses Prolog-like notation
- elements of Datalog are atoms of the form p(X1, X2, ..., Xn)
- p is a predicate that represents a statement such as "a definition reaches the beginning of a block"
- X1, ... are terms such as variables or constants, or simple expressions
- a ground atom is a predicate with only constants as arguments
- a predicate can be represented by a relation, that is, a table of it's true ground atoms
- each row is a tuple of the relation
- each ground atom (row) in a relation is true

For example, predicate in(B, D) means "definition D reaches the beginning of block B"
    B | D
   -------
    a | w       definition w reaches the beginning of block a
    b | y
    c | z

- comparison predicates operate differently than the above "fact" atoms
- A literal is either an atom or a negated atom
- NOT in(B, D)
- variables begin with a capital letter, other symbols don't

SEE: https://en.wikipedia.org/wiki/Datalog

- rules have the form H :- B1 & B2 & B3 & ... & Bn
- where the B's are subgoals of the head, H, of the rule
- "the head is true if the body is true"
- facts can then be composed of other facts, but if one of the subgoals in the body is not a fact (perhaps it's a comparison), then we can't determine that the header is a fact

Directed graph example:

path(X, Y) :- edge(X, Y)                # fact "there is a path from x to y because there is an edge from x to y
path(X, Y) :- path (X, Z) & path(Z, Y)  # fact "there is a path from x to y, because there is a path from x to z, and a path from z to y"
    # transitive closure

- some predicates are assumes to exist beforehand, and are known as EDB or extensional database predicates
- IDB, or intensional database predicates, are defined by the rules of the Datalog program

def(b1, 1, x)       # x is defined at position 1 in block b1
def(b1, 2, Y)       # any possible variable, Y, is defined at point 2 in b1
succ(B, N, C)       # true if block C is a successor of block B in the flow graph, and B has N statements
rd(B, N, C, M, X)   # true if variable X, at statement M, in block C, reaches point N, in block B

Basic Execution:
So for the above directed graph example, the first rule establishes the fact that all edges are paths,
and then on subsequent iterations of the ruleset we form paths of length 2, then 3, then 4, etc...
So the number of iterations

- efficiency enhancement possible through incremental form, look it up

Problematic Datalog rules
- unsafe rules are those that have a variable in the head that does not appear in the body in a way that constrains that variable to take on only values that appear in the EDB
- unstratified programs are those sets of rules that have a recursion involving negation

For example,
p(X, Y) :-= q(Z) & NOT r(X) & X != Y is unsafe because, if r(X) is false, then p is true for an infinite number of pairs X and Y where X does not equal Y

TODO: understand strata as it applies to recursion and negation
- ultimately the effect is that the program fails to converge (infinite loop)

p(X) :- e(X) & NOT p(X)

SEE: https://en.wikipedia.org/wiki/Pointer_analysis
SEE: https://en.wikipedia.org/wiki/Alias_analysis

Pointer-Analysis Algorithm
- the fundamental question we're answering is: are a given pair of pointers aliased?
- one way to answer this is to compute the set of objects that a pointer can point to at a point in the program
- pointer analysis is difficult in languages that allow pointer arithmetic
- indirect function calls present another problem in determining what the value of a pointer can be
- if we can't determine which function is being called, then we must assume that the function can change the value of the pointer to anything
- the goal of this analysis is to determine what each variable and each field of an object can point to
    also known as "points-to analysis"
- flow-insensitive analysis ignores control flow, i.e. it treats every statement as being executed in any order

Datalog Formulation for Flow-Insensitive Pointer-Alias Analysis
Four kinds of statements (excluding procedure calls):
- object creation, h: T v = new T();
- copy statement, v = w;
- field store, v.f = w;
- field load, v = w.f;

IDB predicates we need to compute:
pts(V, H)       # variable V can point to heap object H
hpts(H, F, G)   # field F of heap object H can point to object G

EDB predicate object creation example:
H : T V = new T     # at statement H there is an assignment that makes variable V point to a new object of type T
    or new=(H, V, T)

pts(V, H)       :- H : T V = new T        # V can point to heap object H if H is an assignment of a new object to V
pts(V, H)       :- V = W & pts(W, H)      # V can point to heap object H if there is a copy statement V = W and W can point to H
hpts(H, F, G)   :- V.F = W &              # field F of heap object H can point to object G if
                   pts(W, G) &            #     there is an assigment of W to V.F and W can point to G and V can point to H
                   pts(V, H)
pts(V, H)       :- V = W.F &
                   pts(W, G) &
                   hpts(G, F, H)

Context-Insensitive Analysis
- for procedure calls, parameters and return values are modeled by copy statements
- for x = y.n(z)
    * this = y
    * z = ?
    * x = y.n(z)

actual(S, I, V) says V is the Ith actual parameter used in call site S
formal(M, I, V) says that V is the I'th formal parameter declared in method M
cha(T, N, M) says that M is the method called when N is invoked on a receiver object of type T (class hierarchy analysis)
--
invokes(S, M)   :- "S: V.N(...)" &
                   pts(V, H) &
                   hType(H, T) &
                   cha(T, N, M)
pts(V, H)       :- invokes(S, M) &
                   formal(M, I, V) &
                   actual(S, I, W) &
                   pts(W, H)

- in Java, reflection will thwart any attempts to state conclusively that an object is of a certain type, or that a method invocation is to a specific procedure

Context-Sensitive Pointer Analysis
- computing procedure summaries for context sensitive analysis is difficult for a few reasons:
    * each method's summary must include the effects of all updates that the function itself and all of it's callees make to
        reachable static variables, incoming parameters, and all objects created by the method and it's callees
    * solutions at the time of this book's writing didn't scale up to large programs
- this approach uses cloning-based context-sensitive analysis
- there will likely be exponentially many contexts of interest when dealing with the cloned call graph
- so we apply the context-insensitive algorithm after representing the information for the contexts in a binary decision diagram
- a precondition to this approach is to compute the call graph initially before we start

Getting Started
- *** a context is a representation of the call string that forms the history of the active function calls ***
- begin by finding all of the mutually recursive sets of functions in the program
- strongly connected components that are recursive or mutually recursive functions are dubbed non-trivial components
- strongly connected components that are nonrecursive are dubbed trivial components
- we can omit some call strings from the set of contexts

Adding Context to Datalog Rules

CSinvokes(S, C, M, D) is true if the call site S in context C calls the D context of method M
pts(V, C, H) is true if variable V in context C can point to heap object H

Datalog Implementation by BDDs
- a binary decision diagram (BDD) represents a boolean function by a rooted DAG
- interior nodes are labeled by one of the variables of the represented function
- two leaves, 0 and 1
- interior nodes have edges labeled "low" and "high"
- low edge is associated with the case that the variable at the node has value 0
- high case is 1
- f(X, Y, Z) would then have 8 possible interior nodes and 2 leaves, because 2^3 = 8 + 2 leaves
- binary decision diagrams have built in short-circuiting, for example:
- if w x y z = 0 1 0 1 and w && x = 0, then we can short circuit
- interior nodes have ranked, where each rank contains a particular variable
- two transformations on BDDs:
    * short circuiting, if node N has both edges pointing to M, then we may redirect N's in-edges to M and delete N
    * node-merging, if N and M have low edges pointing to the same node, and high edges pointing to the same node, then we can merge the two
- a domain for a component of a relation is the set of possible values that tuples can have in that component

SEE: https://en.wikipedia.org/wiki/Finitary_relation
SEE: https://en.wikipedia.org/wiki/Binary_decision_diagram

- the relation pts(V, H) has the domain of all program variables for it's first argument, and the domain of all object-creating statements for it's second
- x OR y `union` NOT x AND NOT y

Call graphs are bipartite graphs
SEE: https://en.wikipedia.org/wiki/Bipartite_graph
Steensgaard for scalable pointer-alias analysis
Fahndrich, Rehof, and Das for a context-sensitive, flow insensitive, equivalence-based analysis that scales to use cases like GCC's

https://en.wikipedia.org/wiki/Automatic_vectorization
