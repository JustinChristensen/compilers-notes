# keywords
auto                    /auto/
break                   /break/
case                    /case/
char                    /char/
const                   /const/
continue                /continue/
default                 /default/
do                      /do/
double                  /double/
else                    /else/
enum                    /enum/
extern                  /extern/
float                   /float/
for                     /for/
goto                    /goto/
if                      /if/
inline                  /inline/
int                     /int/
long                    /long/
register                /register/
restrict                /restrict/
return                  /return/
short                   /short/
signed                  /signed/
sizeof                  /sizeof/
static                  /static/
struct                  /struct/
switch                  /switch/
typedef                 /typedef/
union                   /union/
unsigned                /unsigned/
void                    /void/
volatile                /volatile/
while                   /while/
_Alignas                /_Alignas/
_Alignof                /_Alignof/
_Atomic                 /_Atomic/
_Bool                   /_Bool/
_Complex                /_Complex/
_Generic                /_Generic/
_Imaginary              /_Imaginary/
_Noreturn               /_Noreturn/
_Static_assert          /_Static_assert/
_Thread_local           /_Thread_local/

# preprocessing
ifdef                   /ifdef/
ifndef                  /ifndef/
elif                    /elif/
endif                   /endif/
include                 /include/
define                  /define/
undef                   /undef/
line                    /line/
error                   /error/
pragma                  /pragma/

# identifier
identifier              /{alpha_}{alnum}+/

# number constants
decimal_constant        /[1-9][0-9]*/
octal_constant          /0[0-7]*/
hexadecimal_constant    /(0(x|X))[0-9a-fA-F]+/

# char constant
char_sequence           /'(\\.|[^'])'/
string_sequence         /"(\\.|[^"])*"/

header_name             /<[^\n>]>|"[^\n"]"/
pp_number               /([0-9]|\.[0-9])(([0-9]|{alpha_})|(e|E|p|P)(+-))*/

lparen                  /[^\t\n\v\f\r ]\(/
new_line                /\n/

---

# A.1.1 Lexical Elements

# token:
#       keyword
#     | identifier
#     | constant
#     | string_literal
#     | punctuator ;

# A.1.2 Keywords

preprocessing_token:
      header_name
    | identifier
    | pp_number
    | character_constant
    | string_literal
    | punctuator
    | each non-white-space character that cannot be one of the above

# keyword:
#       auto
#     | break
#     | case
#     | char
#     | const
#     | continue
#     | default
#     | do
#     | double
#     | else
#     | enum
#     | extern
#     | float
#     | for
#     | goto
#     | if
#     | inline
#     | int
#     | long
#     | register
#     | restrict
#     | return
#     | short
#     | signed
#     | sizeof
#     | static
#     | struct
#     | switch
#     | typedef
#     | union
#     | unsigned
#     | void
#     | volatile
#     | while
#     | _Alignas
#     | _Alignof
#     | _Atomic
#     | _Bool
#     | _Complex
#     | _Generic
#     | _Imaginary
#     | _Noreturn
#     | _Static_assert
#     | _Thread_local
#     ;

opt_identifier: identifier | $empty;

# A.1.5 Constants

constant:
      integer_constant
#    | floating_constant
    | enumeration_constant
    | character_constant
    ;

enumeration_constant: identifier "x";

integer_constant:
      decimal_constant opt_integer_suffix
    | octal_constant opt_integer_suffix
    | hexadecimal_constant opt_integer_suffix
    ;

integer_suffix:
      "u"
    | "U"
    | "l"
    | "L"
    | "ll"
    | "LL"
    | "ull"
    | "ULL";

opt_integer_suffix: integer_suffix | $empty;

character_constant:
      char_sequence
    | "L" char_sequence
    | "u|U" char_sequence
    ;

# A.1.6 String Literals

string_literal:
    opt_string_encoding_prefix string_sequence;

opt_string_encoding_prefix: "u8" | "u" | "U" | "L" | $empty;

# A.1.7 Punctuators

punctuator:
      "["
    | "]"
    | "("
    | ")"
    | "{"
    | "}"
    | "."
    | "->"
    | "++"
    | "--"
    | "&"
    | "*"
    | "+"
    | "-"
    | "~"
    | "!"
    | "/"
    | "%"
    | "<<"
    | ">>"
    | "<"
    | ">"
    | "<="
    | ">="
    | "=="
    | "!="
    | "^"
    | "|"
    | "&&"
    | "||"
    | "?"
    | ":"
    | ";"
    | "..."
    | "="
    | "*="
    | "/="
    | "%="
    | "+="
    | "-="
    | "<<="
    | ">>="
    | "&="
    | "^="
    | "|="
    | ","
    | "#"
    | "##"
    | "<:"
    | ":>"
    | "<%"
    | "%>"
    | "%:"
    | "%:%:"
    ;

# A.2.1 Expressions

primary_expression:
      identifier
    | constant
    | string_literal
    | "(" expression ")"
    | generic_selection
    ;

generic_selection:
      _Generic "(" assignment_expression "," generic_assoc_list ")";

generic_assoc_list:
      generic_association
    | generic_assoc_list "," generic_association;

generic_association:
      type_name ":" assignment_expression
    | default ":" assignment_expression
    ;

postfix_expression:
      primary_expression
    | postfix_expression "[" expression "]"
    | postfix_expression "(" opt_argument_expression_list ")"
    | postfix_expression "." identifier
    | postfix_expression "->" identifier
    | postfix_expression "++"
    | postfix_expression "-"
    | "(" type_name ")" "{" initializer_list "}"
    | "(" type_name ")" "{" initializer_list "," "}"
    ;

argument_expression_list:
      assignment_expression
    | argument_expression_list "," assignment_expression
    ;

opt_argument_expression_list: argument_expression_list | $empty ;

unary_expression:
      postfix_expression
    | "++" unary_expression
    | "-" unary_expression
    | unary_operator cast_expression
    | sizeof unary_expression
    | sizeof "(" type_name ")"
    | _Alignof "(" type_name ")"
    ;

unary_operator: "&" | "*" | "+" | "-" | "Ëœ" | "!";

cast_expression:
      unary_expression
    | "(" type_name ")" cast_expression
    ;

multiplicative_expression:
      cast_expression
    | multiplicative_expression "*" cast_expression
    | multiplicative_expression "/" cast_expression
    | multiplicative_expression "%" cast_expression
    ;

additive_expression:
      multiplicative_expression
    | additive_expression "+" multiplicative_expression
    | additive_expression "-" multiplicative_expression
    ;

shift_expression:
      additive_expression
    | shift_expression "<<" additive_expression
    | shift_expression ">>" additive_expression
    ;

relational_expression:
      shift_expression
    | relational_expression "<" shift_expression
    | relational_expression ">" shift_expression
    | relational_expression "<=" shift_expression
    | relational_expression ">=" shift_expression
    ;

equality_expression:
      relational_expression
    | equality_expression "==" relational_expression
    | equality_expression "!=" relational_expression
    ;

and_expression:
      equality_expression
    | and_expression "&" equality_expression
    ;

exclusive_or_expression:
      and_expression
    | exclusive_or_expression "^" and_expression
    ;

inclusive_or_expression:
      exclusive_or_expression
    | inclusive_or_expression "|" exclusive_or_expression
    ;

logical_and_expression:
      inclusive_or_expression
    | logical_and_expression "&&" inclusive_or_expression
    ;

logical_or_expression:
      logical_and_expression
    | logical_or_expression "||" logical_and_expression
    ;

conditional_expression:
      logical_or_expression
    | logical_or_expression "?" expression ":" conditional_expression
    ;

assignment_expression:
      conditional_expression
    | unary_expression assignment_operator assignment_expression
    ;

opt_assignment_expression: assignment_expression | $empty;

assignment_operator:
      "=" | "*=" | "/=" | "%="
    | "+=" | "-=" | "<<=" | ">>="
    | "&=" | "^=" | "|="
    ;

expression:
      assignment_expression
    | expression "," assignment_expression
    ;

opt_expression: expression | $empty;

constant_expression: conditional_expression;

# A.2.2 Declarations

declaration:
      declaration_specifiers opt_init_declarator_list ";"
    | static_assert_declaration
    ;

declaration_specifiers:
      storage_class_specifier opt_declaration_specifiers
    | type_specifier opt_declaration_specifiers
    | type_qualifier opt_declaration_specifiers
    | function_specifier opt_declaration_specifiers
    | alignment_specifier opt_declaration_specifiers
    ;

opt_declaration_specifiers: declaration_specifiers | $empty;

init_declarator_list:
      init_declarator
    | init_declarator_list "," init_declarator
    ;

opt_init_declarator_list: init_declarator_list | $empty;

init_declarator:
      declarator
    | declarator "=" initializer
    ;

storage_class_specifier:
      typedef
    | extern
    | static
    | _Thread_local
    | auto
    | register
    ;

type_specifier:
      void
    | char
    | short
    | int
    | long
    | float
    | double
    | signed
    | unsigned
    | _Bool
    | _Complex
    | atomic_type_specifier
    | struct_or_union_specifier
    | enum_specifier
    | typedef_name
    ;

struct_or_union_specifier:
      struct_or_union opt_identifier "{" struct_declaration_list "}"
    | struct_or_union identifier
    ;

struct_or_union: struct | union;

struct_declaration_list:
      struct_declaration
    | struct_declaration_list struct_declaration
    ;

struct_declaration:
      specifier_qualifier_list opt_struct_declarator_list ";"
    | static_assert_declaration
    ;

specifier_qualifier_list:
      type_specifier opt_specifier_qualifier_list
    | type_qualifier opt_specifier_qualifier_list
    | alignment_specifier opt_specifier_qualifier_list
    ;

opt_specifier_qualifier_list: specifier_qualifier_list | $empty;

struct_declarator_list:
      struct_declarator
    | struct_declarator_list "," struct_declarator
    ;

opt_struct_declarator_list: struct_declarator_list | $empty;

struct_declarator:
      declarator
    | opt_declarator ":" constant_expression
    ;

enum_specifier:
      enum opt_identifier "{" enumerator_list "}"
    | enum opt_identifier "{" enumerator_list "," "}"
    | enum identifier
    ;

enumerator_list:
      enumerator
    | enumerator_list "," enumerator
    ;

enumerator:
      enumeration_constant
    | enumeration_constant "=" constant_expression
    ;

atomic_type_specifier: _Atomic "(" type_name ")";

type_qualifier:
      const
    | restrict
    | volatile
    | _Atomic
    ;

function_specifier:
      inline
    | _Noreturn
    ;

alignment_specifier:
      _Alignas "(" type_name ")"
    | _Alignas "(" constant_expression ")"
    ;

declarator: opt_pointer direct_declarator;

opt_declarator: declarator | $empty;

direct_declarator:
      identifier
    | "(" declarator ")"
    | direct_declarator "[" opt_type_qualifier_list opt_assignment_expression "]"
    | direct_declarator "[" static opt_type_qualifier_list assignment_expression "]"
    | direct_declarator "[" type_qualifier_list static assignment_expression "]"
    | direct_declarator "[" opt_type_qualifier_list "*" "]"
    | direct_declarator "(" parameter_type_list ")"
    | direct_declarator "(" opt_identifier_list ")"
    ;

pointer:
      "*" opt_type_qualifier_list
    | "*" opt_type_qualifier_list pointer
    ;

opt_pointer: pointer | $empty;

type_qualifier_list:
      type_qualifier
    | type_qualifier_list type_qualifier
    ;

opt_type_qualifier_list: type_qualifier_list | $empty;

parameter_type_list:
      parameter_list
    | parameter_list "," "..."
    ;

opt_parameter_type_list: parameter_type_list | $empty;

parameter_list:
      parameter_declaration
    | parameter_list "," parameter_declaration
    ;

parameter_declaration:
      declaration_specifiers declarator
    | declaration_specifiers opt_abstract_declarator
    ;

identifier_list:
      identifier
    | identifier_list "," identifier
    ;

opt_identifier_list: identifier_list | $empty;

type_name: specifier_qualifier_list opt_abstract_declarator;

abstract_declarator:
      pointer
    | opt_pointer direct_abstract_declarator
    ;

opt_abstract_declarator: abstract_declarator | $empty;

direct_abstract_declarator:
      "(" abstract_declarator ")"
    | opt_direct_abstract_declarator "[" opt_type_qualifier_list "]"
    | opt_assignment_expression "]"
    | opt_direct_abstract_declarator "[" static opt_type_qualifier_list
    | assignment_expression "]"
    | opt_direct_abstract_declarator "[" type_qualifier_list static
    | assignment_expression "]"
    | opt_direct_abstract_declarator "[" "*" "]"
    | opt_direct_abstract_declarator "(" opt_parameter_type_list ")"
    ;

opt_direct_abstract_declarator: direct_abstract_declarator | $empty;

typedef_name: identifier;

initializer:
      assignment_expression
    | "{" initializer_list "}"
    | "{" initializer_list "," "}"
    ;

initializer_list:
      opt_designation initializer
    | initializer_list "," opt_designation initializer
    ;

designation: designator_list "=";

opt_designation: designation | $empty;

designator_list:
      designator
    | designator_list designator
    ;

designator:
    "[" constant_expression "]"
    | "." identifier
    ;

static_assert_declaration:
    _Static_assert "(" constant_expression "," string_literal ")" ";";

# A.2.3 Statements

statement:
      labeled_statement
    | compound_statement
    | expression_statement
    | selection_statement
    | iteration_statement
    | jump_statement
    ;

labeled_statement:
      identifier ":" statement
    | case constant_expression ":" statement
    | default ":" statement
    ;

compound_statement: "{" opt_block_item_list "}";

block_item_list:
      block_item
    | block_item_list block_item
    ;

opt_block_item_list: block_item_list | $empty;

block_item:
      declaration
    | statement
    ;

expression_statement: opt_expression ";" ;

selection_statement:
      if "(" expression ")" statement
    | if "(" expression ")" statement else statement
    | switch "(" expression ")" statement
    ;

iteration_statement:
      while "(" expression ")" statement
    | do statement while "(" expression ")" ";"
    | for "(" opt_expression ";" opt_expression ";" opt_expression ")" statement
    | for "(" declaration opt_expression ";" opt_expression ")" statement
    ;

jump_statement:
      goto identifier ";"
    | continue ";"
    | break ";"
    | return opt_expression ";"
    ;

# A.2.4 External Definitions

translation_unit:
      external_declaration
    | translation_unit external_declaration
    ;

external_declaration:
      function_definition
    | declaration
    ;

function_definition:
      declaration_specifiers declarator opt_declaration_list compound_statement;

declaration_list:
      declaration
    | declaration_list declaration
    ;

opt_declaration_list: declaration_list | $empty;

# A.3 Preprocessing Directives

preprocessing_file: opt_group;

group:
      group_part
    | group group_part
    ;

opt_group: group | $empty;

group_part:
      if_section
    | control_line
    | text_line
    | "#" non_directive
    ;

if_section:
      if_group opt_elif_groups opt_else_group endif_line;

if_group:
      "#" if constant_expression new_line opt_group
    | "#" ifdef identifier new_line opt_group
    | "#" ifndef identifier new_line opt_group;

elif_groups:
      elif_group
    | elif_groups elif_group
    ;

opt_elif_groups: elif_groups | $empty;

elif_group:
      "#" elif constant_expression new_line opt_group;

else_group:
      "#" else new_line opt_group;

opt_else_group: else_group | $empty;

endif_line:
      "#" endif new_line;

control_line:
      "#" include pp_tokens new_line
    | "#" define identifier replacement_list new_line
    | "#" define identifier lparen opt_identifier_list ")"
    | replacement_list new_line
    | "#" define identifier lparen "..." ")" replacement_list new_line
    | "#" define identifier lparen identifier_list "," "..." ")"
    | replacement_list new_line
    | "#" undef identifier new_line
    | "#" line pp_tokens new_line
    | "#" error opt_pp_tokens new_line
    | "#" pragma opt_pp_tokens new_line
    | "#" new_line
    ;

text_line: opt_pp_tokens new_line;

non_directive: pp_tokens new_line;

replacement_list: opt_pp_tokens;

pp_tokens:
      preprocessing_token
    | pp_tokens preprocessing_token
    ;

opt_pp_tokens: pp_tokens | $empty;

on_off_switch: "ON" | "OFF" | "DEFAULT";

